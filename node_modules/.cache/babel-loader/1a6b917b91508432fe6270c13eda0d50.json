{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhii\\\\Desktop\\\\BookMovieApp\\\\Final\\\\src\\\\Components\\\\ImageList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImageList from '@material-ui/core/ImageList';\nimport ImageListItem from '@material-ui/core/ImageListItem';\nimport ImageListItemBar from '@material-ui/core/ImageListItemBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  imageList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background: 'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  }\n}));\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const itemData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\n\nexport default function SingleLineImageList() {\n  _s();\n\n  const classes = useStyles();\n  const [result, setResult] = useState([]);\n  useEffect(() => {\n    const results = getMovieList();\n    setResult({ ...results\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(ImageList, {\n      className: classes.imageList,\n      cols: 2.5,\n      children: result.map(tileItems)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SingleLineImageList, \"qk2ZMDJgqG6nfMSnlgWfBUpZb8I=\", false, function () {\n  return [useStyles];\n});\n\n_c = SingleLineImageList;\n\nfunction tileItems(item) {\n  return /*#__PURE__*/_jsxDEV(ImageListItem, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: item.img,\n      alt: item.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n      title: item.title,\n      classes: {\n        root: classes.titleBar,\n        title: classes.title\n      },\n      actionIcon: /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": `star ${item.title}`,\n        children: /*#__PURE__*/_jsxDEV(StarBorderIcon, {\n          className: classes.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, item.img, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n\nasync function getMovieList() {\n  try {\n    const rawResponse = await fetch('http://localhost:8085/api/v1/movies?page=1&limit=50');\n    const result = await rawResponse.json();\n\n    if (rawResponse.ok) {\n      return result.movies;\n    } else {\n      const error = new Error();\n      error.message = result.message || 'Something went wrong';\n      throw error;\n    }\n  } catch (e) {\n    alert(`Error: ${e.message}`);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleLineImageList\");","map":{"version":3,"sources":["C:/Users/abhii/Desktop/BookMovieApp/Final/src/Components/ImageList.js"],"names":["React","useEffect","useState","makeStyles","ImageList","ImageListItem","ImageListItemBar","IconButton","StarBorderIcon","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","imageList","transform","title","color","primary","light","titleBar","SingleLineImageList","classes","result","setResult","results","getMovieList","map","tileItems","item","img","rawResponse","fetch","json","ok","movies","error","Error","message","e","alert"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ImageList from '@material-ui/core/ImageList';\r\nimport ImageListItem from '@material-ui/core/ImageListItem';\r\nimport ImageListItemBar from '@material-ui/core/ImageListItemBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  imageList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const itemData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function SingleLineImageList() {\r\n  const classes = useStyles();\r\n  const [result,setResult] = useState([]);\r\n  useEffect(() => {\r\n    const results = getMovieList();\r\n    setResult({...results});\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ImageList className={classes.imageList} cols={2.5}>\r\n        {result.map(tileItems)}\r\n      </ImageList>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction tileItems(item){\r\n  return <ImageListItem key={item.img}>\r\n            <img src={item.img} alt={item.title} />\r\n            <ImageListItemBar\r\n               title={item.title}\r\n                classes={{\r\n                 root: classes.titleBar,\r\n               title: classes.title,\r\n                }}\r\n             actionIcon={\r\n            <IconButton aria-label={`star ${item.title}`}>\r\n              <StarBorderIcon className={classes.title} />\r\n             </IconButton>\r\n            }\r\n           />\r\n        </ImageListItem>\r\n}\r\n\r\nasync function getMovieList() {\r\n    \r\n  try{\r\n    const rawResponse = await fetch('http://localhost:8085/api/v1/movies?page=1&limit=50');\r\n\r\n    const result = await rawResponse.json();\r\n\r\n    if(rawResponse.ok){\r\n     return result.movies;\r\n    }else{\r\n      const error = new Error();\r\n      error.message = result.message || 'Something went wrong';\r\n      throw error;\r\n    }\r\n  }catch(e){\r\n    alert(`Error: ${e.message}`);\r\n  }    \r\n} "]},"metadata":{},"sourceType":"module"}